#!/usr/bin/python3

import os
import argparse
from multiprocessing import Pool, cpu_count
import numpy as np
import tifffile as tiff
from tqdm import tqdm
import fbp

def normalize_(args):
    return fbp.normalize(args[0], bg=args[1], dark=args[2])

def compute_ct(i, images, angles, center, px_size):
    ct = fbp.run(images[:,i,:].copy(), angles, center=center)
    if px_size is not None:
        ct = (10000 / px_size) * ct
    return ct

def load_image_(args):
    in_dir, file_ = args
    return tiff.imread(os.path.join(in_dir, file_)).astype(np.float32)

def load_images(in_dir, files):
    with Pool(processes=min(8, cpu_count())) as pool:
        with tqdm(total=len(files)) as bar:
            args = [(in_dir, file_) for file_ in files]
            return [bar.update(1) or img for img in pool.imap_unordered(load_image_, args)]

def save_slice(out_dir, i, ct):
    tiff.imwrite(os.path.join(out_dir, "a{:04d}.tif".format(i)), ct.astype(np.float32), compress=6)

def save_slice_(args):
    save_slice(*args)

def save_volume(out_dir, slices):
    with Pool(processes=min(8, cpu_count())) as pool:
        with tqdm(total=len(slices)) as bar:
            args = [(out_dir, i, slice_) for i, slice_ in enumerate(slices)]
            for _ in pool.imap_unordered(save_slice_, args):
                bar.update(1)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", help="File or directory name for output", default="ct")
    parser.add_argument("-s", "--slice", help="Specify slice number if you want a single ct", type=int)
    parser.add_argument("-c", "--center", help="Specify slice number if you want a single ct", type=float)
    parser.add_argument("--i0", help="File name for i0 image", default="i0.tif")
    parser.add_argument("--dark", help="File name for dark image", default="dark.tif")
    parser.add_argument("--px-size", help="Pixel size of the beam monitor", type=float)
    parser.add_argument("--opposite", help="Use this flag to compute projections 180 to 360.", action='store_true')
    parser.add_argument("input_dir")
    args = parser.parse_args()

    in_dir = args.input_dir
    out_dir = args.output
    i0_file = args.i0
    dark_file = args.dark

    assert (os.path.exists(in_dir) and os.path.isdir(in_dir)), ("Input directory does not exist: {}".format(in_dir))
    assert (not os.path.exists(out_dir) or os.path.isdir(out_dir)), ("File exists: {}".format(out_dir))
    assert (os.path.exists(i0_file) ), ("File does not exist: {}".format(i0_file))
    assert (os.path.exists(dark_file) ), ("File does not exist: {}".format(dark_file))

    dark = tiff.imread(dark_file).astype(np.float32)
    i0 = tiff.imread(i0_file).astype(np.float32)

    files = os.listdir(in_dir)
    files.sort()
    print("Load projection data...")
    images = np.stack([fbp.normalize(image, bg=i0, dark=dark) for image in tqdm(load_images(in_dir, files))])
    n_angles, height, width = images.shape

    tiff.imwrite("sino.tif", images[:,int(height/2),:], compress=6)

    if args.opposite:
        angles = (np.pi / float(n_angles)) * np.arange(0, n_angles, dtype=np.float32) + np.pi
    else:
        angles = (np.pi / float(n_angles)) * np.arange(0, n_angles, dtype=np.float32)

    if args.slice is not None:
        ct = fbp.run(images[:,args.slice,:].copy(), angles, center=args.center)
        if args.px_size is not None:
            ct = (10000 / args.px_size) * ct
        tiff.imwrite("{}_{}.tif".format(out_dir, args.slice), ct, compress=6)
    else:
        if not os.path.exists(out_dir):
            os.makedirs(out_dir)
        print("ct reconstruction for {}:".format(out_dir))
        slices = [compute_ct(i, images, angles, args.center, args.px_size) for i in tqdm(range(height))]
        print("Saving ct data...")
        save_volume(out_dir, slices)

if __name__ == '__main__':
    main()

