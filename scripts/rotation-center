#!/usr/bin/python3

import os
import argparse
import numpy as np
import tifffile as tiff
from meanshift import meanshift, Point2d
import fbp

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--i0", help="file name for i0 image", default=None)
    parser.add_argument("--dark", help="file name for dark image", default=None)
    parser.add_argument("base_sample", help="A image file for a base sample")
    parser.add_argument("opposite_sample", help="A image file for the next sample")
    args = parser.parse_args()

    base_file = args.base_sample
    oppo_file = args.opposite_sample
    assert(os.path.isfile(base_file) and os.path.isfile(oppo_file)), \
        "Files is expected as inputs for base_sample and opposite_sample"

    i0_file = args.i0
    if i0_file is not None:
        assert (os.path.exists(i0_file)), ("File does not exist: {}".format(i0_file))
    i0 = i0_file and tiff.imread(i0_file).astype(np.float32)

    dark_file = args.dark
    if dark_file is not None:
        assert (os.path.exists(dark_file)), ("File does not exist: {}".format(dark_file))
    dark = dark_file and tiff.imread(dark_file).astype(np.float32)

    base = fbp.normalize(tiff.imread(base_file).astype(np.float32), bg=i0, dark=dark)
    opposite = fbp.normalize(tiff.imread(oppo_file).astype(np.float32), bg=i0, dark=dark)

    height, width = base.shape
    w = int(width/10)
    h = int(height/10)

    base = base[4*h:5*h, 4*w:5*w].copy()
    opposite = np.fliplr(opposite).copy()

    maxv = np.max(base)
    minv = np.min(base)
    base = (255*(base - minv)/(maxv - minv)).astype(np.uint8)
    opposite = (255*(opposite - minv)/(maxv - minv)).astype(np.uint8)

    offset0 = Point2d(x=4*w, y=4*h)
    offset = meanshift(base, opposite, offset0)

    print( 0.5*(4*w + (width - offset.x)) )

if __name__ == '__main__':
    main()

